#Is there a problem?
dhyper(9,18,9,9)
dnbinom(19,1,0.02)
pnbinom(19,1,0.02)
library(dplyr)
install.packages("ggplot2")
data1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\Batch\\audit.csv")
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\Batch\\audit.csv")
##Grammar elements##
#Aesthetic maps
#Geoms
#Statistical Transformation
#Scales
p<-ggplot(dat1,aes(x=Age,y=Income))
library(ggplot2)
##Grammar elements##
#Aesthetic maps
#Geoms
#Statistical Transformation
#Scales
p<-ggplot(dat1,aes(x=Age,y=Income))
p+geom_point(aes(color=Gender))
p+geom_point(aes(color="blue"))
p+geom_point(color="blue")#Mapping Vs Fixing a value
p+geom_point(aes(color="blue"))
p+geom_point(color="blue")#Mapping Vs Fixing a value
p<-ggplot(dat1,aes(x=Gender,y=Income))
p<-ggplot(dat1,aes(x=Gender,y=Income))
p+geom_bar()#Why?
p+geom_bar(stat="identity")
p<-ggplot(dat1,aes(x=Age,y=Income))
p+geom_point(aes(color=Gender))
p+geom_point(aes(color=Gender))+scale_x_continuous(breaks=seq(0,80,10))
p+geom_point(aes(color=Gender))
p+geom_point(aes(color=Gender))+scale_x_continuous(breaks=seq(0,80,10))
p+geom_point(aes(size=Gender,color=Income))#Adjust the size of points
View(dat1)
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(range = c(1,2))
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(range = c(1,3))
#Adjust the gradient of the color
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(labels=c("F","M"),range = c(1,3))+scale_color_continuous(low="blue",high="red")
#What if I don't want to see the legend corresponding to size?
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(labels=c("F","M"),range = c(1,3))+scale_color_continuous(low="blue",high="red")+guides(size=F)
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(labels=c("F","M"),range = c(1,3))+scale_color_continuous(low="blue",high="red")+guides(size=F)+facet_grid(Gender~.)#Anything else we can do?
p+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(labels=c("F","M"),range = c(1,3))+
scale_color_continuous(low="blue",high="red")+guides(size=F)+
facet_grid(Gender~.)#Anything else we can do?
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size(c(1,2))
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size(c(1,2))
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))+scale_color_brewer()
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))+scale_color_brewer()
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))+scale_size_date()
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))+scale_size_date(p)
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))+scale_size_date(dat1)
p+geom_point(aes(size=Gender,color=Income,))+
scale_color_continuous(low = "black",high = "white")+
scale_size_discrete(range = c(1,2))
p+geom_point(aes(size=Gender,color=Income))+scale_size_discrete(labels=c("F","M"),range = c(1,3))+
scale_color_continuous(low="blue",high="red")+guides(size=F)+
geom_smooth()+facet_grid(Gender~.)
dat1%>%mutate(incomeBin=ntile(Income,2)=dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\Batch\\audit.csv")
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
View(dat1)
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,2)->dat2
dat1%>%mutate(incomeBin=ntile(Income,10)->dat2
dat1%>%mutate(incomeBin=ntile(Income,10)->dat2
dat1%>%mutate(Group=ntile(Income,10))->dat2
dat1%>%mutate(incomeBin=ntile(Income,2))->dat2
View(dat2)
p<-ggplot(dat2,aes(x = incomBin,Gender,y = Income))
p<-ggplot(dat2,aes(x = incomeBin,Gender,y = Income))
p+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(range = c(1,2))+
scale_color_continuous(low="black",high = "red")+
facet_grid(incomeBin~.)
p+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(labels=c("F","M"),range = c(1,3))+
scale_color_continuous(low="blue",high="red")+guides(size=F)+
facet_grid(Gender~.)#Anything else we can do?
p<-ggplot(dat1,aes(x=Age,y=Income))
p+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(labels=c("F","M"),range = c(1,3))+
scale_color_continuous(low="blue",high="red")+guides(size=F)+
facet_grid(Gender~.)#Anything else we can do?
#What if I don't want to see the legend corresponding to size?
p+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(labels=c("F","M"),range = c(1,3))+
scale_color_continuous(low="blue",high="red")+guides(size=F)
q<-ggplot(dat2,aes(x = Age,y = Income))
q+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(range = c(1,2))+
scale_color_continuous(low="black",high = "red")+
facet_grid(incomeBin~.)
q+geom_point(aes(size=Gender,color=Income))+
scale_size_discrete(range = c(1,2))+
scale_color_continuous(low="black",high = "red")+
+scale_y_continuous(breaks=seq(1000))+
facet_grid(incomeBin~.)
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\insurance")
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
insurance <- read.csv("insurance.csv",
stringsAsFactors = TRUE)
str(insurance)
summary(insurance)
summary(insurance$age)
summary(insurance$age)
View(insurance)
library(dplyr)
library(ggplot2)
attach(insurance)
table(gender,age)
table(smoker)
table(gender,region,smoker)
table(age)
plot(table(smoker))
plot(table(age))
plot(I,table(age))
plot(l,table(age))
plot(l,age)
plot(type="l",age)
plot(type="l",table(age))
table(smoker,gender,children)
table(smoker,children)
plot(table(smoker,children))
x=boxplot(age)
y=boxplot(charges)
listOutliers=x$out
listOutliers
x=boxplot(age)
str(x)
summary(insurance$age)
str(y)
list<-x$out
#gives the positions in the data where outliers are present
index<-which(insurance$age %in% list)
index
insurance$age[index]
mean_sw=mean(insurance$age,na.rm = TRUE)
mean_sw
insurance$age[index]=mean_sw
mean_sw
mean(insurance$age)
z=boxplot(bmi)
y=boxplot(charges)
#Check for missing values
colSums(is.na(insurance))
insuranceNew<-na.omit(insurance) #omit observations
dim(insurance)
dim(insuranceNew)
insurance$bmi[is.na(insurance$bmi)]=mean(insurance$bmi,na.rm = TRUE)
dim(insurance)
dim(insuranceNew)
M<-c(1,2,NA,3,4,5)
mean(M)
mean(M,na.rm=TRUE)
mean(M,na.rm=FALSE)
mean(insuranceNew$bmi)
mean(insurance$bmi)
install.packages("randomforest")
yes
install.packages("randomForest")
library(randomForest)
insurance$bmi<-na.roughfix(insurance$bmi)
#group by multiple values
aggregate(charges ~ sex , data=insurance, FUN=mean) #What inference?
#group by multiple values
aggregate(charges ~ gender , data=insurance, FUN=mean) #What inference?
aggregate(charges ~ smoker , data=insurance, FUN=mean) #What inference?
aggregate(charges ~ region , data=insurance, FUN=mean) #What inference?
aggregate(charges ~ region + smoker + sex, data=insurance, FUN=mean)#What inference?
aggregate(charges ~ region + smoker + gender, data=insurance, FUN=mean)#What inference?
aggregate(charges~ children data= insurance,FUN=mean)
aggregate(charges ~ children ,data= insurance,FUN=mean)
aggregate(children, data=insurance,  FUN=n())
aggregate(charges ~ children ,data= insurance,FUN=mean)
aggregate(children, data=insurance,  FUN=sum())
aggregate(children ~ children, data=insurance,  FUN=sum())
aggregate(children ~ children, data=insurance,  FUN = sum)
aggregate(children, data=insurance,  FUN = sum)
aggregate(children ~ children, data=insurance,  FUN = sum)
aggregate(children ~ children, data=insurance)
hist(insurance$charges)
library(ggplot2)
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)),position = "dodge")
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)))
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)),position = "dodge")+facet_grid(region~gender)
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)),position = "dodge")+facet_grid(gender~)
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)),position = "dodge")+facet_grid(gender~.)
#box plots :
ggplot(insurance,aes(y=charges,x=sex,fill=as.factor(sex)))+ geom_boxplot()
#box plots :
ggplot(insurance,aes(y=charges,x=sex,fill=as.factor(gender)))+ geom_boxplot()
#box plots :
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+ geom_boxplot()
#box plots :
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))
#box plots :
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+ geom_curve()
#box plots :
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+ geom_boxplot()
#box plots :
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+ geom_boxplot()+facet_grid(children~gender)
ggplot(insurance,aes(x=charges))+
geom_histogram(aes(fill=as.factor(smoker)),position = "dodge")+facet_grid(children~gender)
ggplot(insurance,aes(y=charges,x=sex,fill=as.factor(sex)))+
geom_boxplot() +facet_grid(region~smoker)
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+
geom_boxplot() +facet_grid(region~smoker)
ggplot(insurance,aes(y=charges,x=gender))+
geom_boxplot() +facet_grid(region~smoker)
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+
geom_boxplot() +facet_grid(region~smoker)
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+
geom_histogram() +facet_grid(region~smoker)
ggplot(insurance,aes(y=charges,x=gender,fill=as.factor(gender)))+
geom_histogram()
#bmi vs charges
p<-ggplot(insurance,aes(x=bmi,y=charges,color=as.factor(sex)))
p+geom_point()
#bmi vs charges
p<-ggplot(insurance,aes(x=bmi,y=charges,color=as.factor(gender)))
p+geom_point()
p+geom_point()+facet_grid(.~smoker)
p<-ggplot(insurance,aes(x=bmi,y=charges,color=as.factor(smoker)))
p+geom_point()
p<-ggplot(insurance,aes(x=age=charges,color=as.factor(smoker)))
p<-ggplot(insurance,aes(x=age,y=charges,color=as.factor(smoker)))
p+geom_point()
p+geom_point()+facet_grid(.~gender)
cor(insurance[c("age", "bmi", "children", "charges")])
cor(age,smokers)
cor(insurance$age,insurance$smokers)
cor(insurance['age','smokers')
cor(insurance['age','smokers'])
cor(insurance["age", "smokers"])
cor(insurance["age", "bmi"])
cor(insurance["age", "bmi", "children"])
cor(insurance[c("age", "bmi", "children", "charges")])
cor(insurance["age", "bmi", "children", "charges"])
cor(insurance[c("age", "smokers")])
cor(insurance[c("age", "smoker")])
pairs(insurance[c("age2", "bmi", "children", "charges")])
pairs(insurance[c("age", "bmi", "children", "charges")])
cor(insurance[c("age", "bmi", "children", "charges")])
# add an indicator for BMI >= 30
insurance$bmi30 <- ifelse(insurance$bmi >= 30, 1, 0)
View(insurance)
##----------------------------------------Dummy variable creation-----------------------------##
insurance$dummy_r_ne<-ifelse(insurance$region=="northeast",1,0) #Using ifelse
View(insurance)
p<-ggplot(insurance,aes(x=age,y=charges,color=as.factor(smoker)))
p+geom_point()
p+geom_point()+facet_grid(smoker~bmi30)
p<-ggplot(insurance,aes(x=age,y=charges,color=as.factor(gender)))
p+geom_point()
p+geom_point()+facet_grid(smoker~bmi30)
p<-ggplot(insurance,aes(x=age,y=charges,color=as.factor(smoker)))
p+geom_point()+facet_grid(gender~bmi30)
("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\insurance")
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\insurance")
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
insurance <- read.csv("goodbad.csv",
stringsAsFactors = TRUE)
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day6\\goodbad handson\\")
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
insurance <- read.csv("goodbad.csv",
stringsAsFactors = TRUE)
## Example: Predicting Medical Expenses ----
## Step 2: Exploring and preparing the data ----
goodbaddata <- read.csv("goodbad.csv",
stringsAsFactors = TRUE)
str(goodbaddata)
View(goodbaddata)
colSums(is.na(goodbaddata))
library(dplyr)
library(ggplot2)
p<-ggplot(goodbaddata,aes(x=CreditHistory,y=GoodBad))
p+geom_point()
p+geom_point()+scale_x_continuous(breaks=seq(0,1,1))
p+geom_point()+scale_y_discrete(breaks=seq(0,1,1))
p<-ggplot(goodbaddata,aes(x=CreditHistory))
p+geom_point()
p<-ggplot(goodbaddata,aes(CreditHistory))
p+geom_point()
#Credit history Vs good or bad customer
#crVsgood
goodbaddata%>%
attach(goodbaddata)
attach(goodbaddata)
table(CreditHistory,GoodBad)
View(goodbaddata)
crVsgood=table(CreditHistory,GoodBad)
plot(crVsgood)
View(goodbaddata)
p<-ggplot(crVsgood,aes(x=GoodBad,y=CreditHistory))
p<-ggplot(goodbaddata,aes(x=GoodBad,y=CreditHistory))
p+geom_histogram()
p+geom_histogram(aes(fill=as.factor(GoodBad))
p+geom_histogram(aes(fill=as.factor(GoodBad))
p<-ggplot(goodbaddata,aes(x=GoodBad,y=CreditHistory))
p+geom_histogram(aes(fill=as.factor(GoodBad))
p+geom_histogram(aes(fill=as.factor(GoodBad))
p<-ggplot(goodbaddata,aes(x=GoodBad,y=CreditHistory))
p+geom_histogram(aes(fill=as.factor(GoodBad))
colSums(is.na(goodbaddata))
colSums(is.na(goodbaddata))
geom_histogram(aes(fill=as.factor(GoodBad))
p<-ggplot(goodbaddata,aes(x=GoodBad,y=CreditHistory))+
geom_histogram(aes(fill=as.factor(GoodBad))
p<-ggplot(goodbaddata,aes(x=GoodBad,y=CreditHistory))+
geom_histogram()
crVsgood=table(CreditHistory,GoodBad)
table(CreditHistory,GoodBad)
plot(table(CreditHistory,GoodBad), type ="l")
plot(table(CreditHistory,GoodBad), type ="o")
View(goodbaddata)
aggregate(Amount ~ GoodBad, data = goodbaddata, FUN = mean)
aggregate(Amount ~ GoodBad+CreditHistory, data = goodbaddata, FUN = mean)
goodbaddata$Age[is.na(goodbaddata$Age)]=mean(goodbaddata$Age,na.rm = TRUE)
#Credit history Vs good or bad customer
#crVsgood
attach(goodbaddata)
aggregate(Amount ~ GoodBad+CreditHistory, data = goodbaddata, FUN = mean)
boxplot(Age)
out=boxplot(Age)
ggplot(goodbaddata,aes(x=Amount))+
geom_histogram(aes(fill=as.factor(GoodBad)))
ggplot(goodbaddata,aes(x=Amount))+
geom_histogram(aes(fill=as.factor(GoodBad)),position="dodge")
ggplot(goodbaddata,aes(x=Age,y=Amount))+
geom_histogram(aes(fill=as.factor(GoodBad)),position="dodge")
ggplot(goodbaddata,aes(x=Age,y=Amount))+
geom_histogram(aes(fill=as.factor(GoodBad)),position="dodge")
ggplot(goodbaddata,aes(x=Age))+
geom_histogram(aes(fill=as.factor(GoodBad)),position="dodge")
ggplot(goodbaddata,aes(x=Age,Amount))+
geom_histogram(aes(fill=as.factor(GoodBad)),position="dodge")
# property Vs credit history Vs Duration
aggregate(Duration ~ Propert+CreditHistory, data = goodbaddata, FUN = mean)
table(Foreign,GoodBad)
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2")
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2",)
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2",CreditHistory)
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2")%>%select(Foreign,GoodBad,CreditHistory)
goodbaddata%>%filter(CreditHistory=="A33",CreditHistory=="A34")%>%
group_by(CreditHistory)%>%summarise(sum(Amount))
goodbaddata%>%filter(CreditHistory=="A33",CreditHistory=="A34")%>%
group_by(CreditHistory)
goodbaddata%>%filter(CreditHistory=="A33"|CreditHistory=="A34")%>%
group_by(CreditHistory)%>%summarise(sum(Amount))
goodbaddata%>%filter(CreditHistory=="A33"|CreditHistory=="A34" &GoodBad=="2")%>%
group_by(CreditHistory)%>%summarise(sum(Amount))
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2")%>%
select(Foreign,GoodBad,CreditHistory)
goodbaddata%>%filter(Foreign=="A202"& GoodBad=="2")%>%
select(Foreign,GoodBad,CreditHistory,Amount)
# property Vs credit history Vs Duration
aggregate(Duration ~ Propert+CreditHistory, data = goodbaddata, FUN = mean)
goodbaddata%>%filter(Propert=="124"& GoodBad=="2"&CreditHistory=="A30")
goodbaddata%>%filter(Propert=="124"& GoodBad=="2"&CreditHistory=="A30")%>%
select(Foreign,GoodBad,CreditHistory,Amount)
goodbaddata%>%filter(Propert=="124"& GoodBad=="2"& CreditHistory=="A30")
goodbaddata%>%filter(Propert=="124"& GoodBad=="2")
goodbaddata%>%filter(Propert=="124")
goodbaddata%>%filter(Propert=="A124"&CreditHistory=="A34" &GoodBad=="2")
goodbaddata%>%filter(Propert=="A124"&CreditHistory=="A34" &GoodBad=="2")%>%summarise(sum(Amount))
library(dplyr)
library(xml)
install.packages("XML")
library(XML)
xmlread=readHTMLTable("https://jigsawacademy.net/courses/399/files/175958")
xmlread=readHTMLTable("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
install.packages("XML")
library(XML)
readHTMLTable("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
xmlreadName=readHTMLTable("https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population")
View(xmlreadName)
xmlreadName=readHTMLTable(
"https://jigsawacademy.net/courses/399/files/175958")
View(xmlreadName)
class(xmlreadName)
u = "https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population"
tables = readHTMLTable(u)
names(tables)
tables[[2]]
doc = htmlParse(u)
tableNodes = getNodeSet(doc, "//table")
tb = readHTMLTable(tableNodes[[2]])
url <- getURL("https://jigsawacademy.net/courses/399/files/175958")
library(XML)
library(RCurl)
install.packages("RCurl")
library(RCurl)
url <- getURL("https://jigsawacademy.net/courses/399/files/175958")
df <- readHTMLTable(url, header = T)
hello <- readHTMLTable(url, header = T)
data.frame(hello)
url <- getURL("https://jigsawacademy.net/courses/399/files/175958")
url1 <- getURL("https://jigsawacademy.net/courses/399/files/175958")
hello <- readHTMLTable(url, header = T)
class(hello)
str(hello)
dim(hello)
url1 <- getURL("https://jigsawacademy.net/courses/399/files/175958",ssl.verifypeer = FALSE)
hello <- readHTMLTable(url, header = T)
class(hello)
dim(hello)
htmlParsed<-htmlTreeParse(htmlContent,
useInternal = TRUE)
htmlParsed<-htmlTreeParse(hello,
useInternal = TRUE)
htmlParsed<-htmlTreeParse(url1,
useInternal = TRUE)
hello <- readHTMLTable(url1, header = T)
str(hello)
dim(hello)
htmlParsed<-htmlTreeParse(url1,
useInternal = TRUE)
if (!require(XML)) install.packages('XML')
library(XML)
x = readHTMLTable('http://www.disastercenter.com/crime/iacrime.htm')
## the 3rd element is what we want
x = readHTMLTable('https://www.disastercenter.com/crime/iacrime.htm')
x
## the 3rd element is what we want
class(x)
dim(x)
x = x[[3]]
x = readHTMLTable('https://www.disastercenter.com/crime/iacrime.htm')
url2=getURL("https://www.disastercenter.com/crime/iacrime.htm")
url2=getURL("http://www.disastercenter.com/crime/iacrime.htm")
x = readHTMLTable(url2)
dim(x)
## the 3rd element is what we want
class(x)
htmlParse(url2)
htmlParse("http://www.disastercenter.com/crime/iacrime.htm")
htmlParse("http://www.disastercenter.com/crime/iacrime.htm", isURL=TRUE)
theurl <- getURL("https://en.wikipedia.org/wiki/Brazil_national_football_team",.opts = list(ssl.verifypeer = FALSE) )
tables <- readHTMLTable(theurl)
class(tables)
dim(tables)
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl)
# Process escape characters
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
webpage
library(RCurl)
library(XML)
theurl <- "http://en.wikipedia.org/wiki/Brazil_national_football_team"
webpage <- getURL(theurl)
webpage <- readLines(tc <- textConnection(webpage)); close(tc)
pagetree <- htmlTreeParse(webpage, error=function(...){}, useInternalNodes = TRUE)
# Extract table header and contents
tablehead <- xpathSApply(pagetree, "//*/table[@class='wikitable sortable']/tr/th", xmlValue)
results <- xpathSApply(pagetree, "//*/table[@class='wikitable sortable']/tr/td", xmlValue)
# Convert character vector to dataframe
content <- as.data.frame(matrix(results, ncol = 8, byrow = TRUE))
# Clean up the results
content[,1] <- gsub("Â ", "", content[,1])
tablehead <- gsub("Â ", "", tablehead)
names(content) <- tablehead
url <- "http://www.bls.gov/web/empsit/cesbmart.htm"
url <- "http://www.bls.gov/web/empsit/cesbmart.htm"
library(XML)
url <- "http://www.bls.gov/web/empsit/cesbmart.htm"
# read in HTML data
tbls_xml <- readHTMLTable(url)
library(httr)
install.packages("httr")
tabs <- GET(url)
tabs <- getURL(url)
tabs <- readHTMLTable(tabs, stringsAsFactors = F)
tabs <- readHTMLTable(tabs, stringsAsFactors = F,as.data.frame = TRUE)
library(XML)
url<-"https://en.wikipedia.org/wiki/List_of_countries_by_population_(United_Nations)"
poptable<-readHTMLTable(url,which=1)
