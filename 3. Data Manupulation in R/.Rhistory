# installing dplyr
install.packages(dplyr)
# installing dplyr
install.packages("dplyr")
library(dplyr)
library(dplyr)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles")
head(dat1)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles",header = T)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles",header = T)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles",header = T)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles")
head(dat1)
str(dat1)
library(dplyr)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles")
View(dat1)
dat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles\\audit.csv")
str(dat1)
head(dat1)
View(dat1)
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles")
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4")
dat2=filter(dat1,Employment="Private",Gender="Male")
dat2=filter(dat1,Employment=="Private",Gender=="Male")
View(dat2)
dat3=filter(dat1,Employment=="Private"&Gender=="Male"|hours>30)
dat3=select(dat1,Employment=="Private"&Gender=="Male")
dat3=select(filter(dat1,Employment=="Private"&Gender=="Male"),Age,Marital)
View(dat3)
str(dat3)
levels(dat3$Marital)
frequency(dat3$Marital)
frequency(dat3$Marital=="Divorced")
group_by(dat3,Marital)
View(dat3)
group_by(dat3,Marital)
group_by(dat3,Marital)
View(group_by(dat3,Marital))
summarise(dat4)
summarise(dat4,count(Marital))
summarise(dat4,length(Marital))
summarise(dat4,length(dat4))
count(dat4,"Marital")
count(dat3,"Marital")
summarise(dat4,n(Marital))
summarise(dat3,n(Marital))
summarise(dat3,n())
dat4=summarise(group_by(dat3,Marital),n())
view(cat4=summarise(group_by(dat3,Marital),n()))
View(cat4=summarise(group_by(dat3,Marital),n()))
cat4=summarise(group_by(dat3,Marital),n())
View(cat4)
# to get the frequency of all the occurences
cat4=summarise(group_by(dat1,Marital),n())
View(cat4)
# to get the frequency of all the occurences
# group_by will group the factors n() is the count
cat4=summarise(group_by(dat1,Marital),count())
# to get the frequency of all the occurences
# group_by will group the factors n() is the count
cat4=summarise(group_by(dat1,Marital),n())
dat1%>%filter(Occupation=="Machinist" & Income>7000 )%>%select(Age,Marital)
%>%select(Age,Marital)%>%group_by(Marital)%>%summarise(n())
dat1%>%filter(Occupation=="Machinist" & Income>7000 )
%>%select(Age,Marital)%>%group_by(Marital)%>%summarise(n())
dat1%>%filter(Occupation=="Machinist" & Income>7000 )%>%select(Age,Marital)%>%group_by(Marital)%>%summarise(n())
dat1%>%filter(Occupation=="Machinist" & Income>7000 )
%>%select(Age,Marital)
dat1%>%filter(Occupation=="Machinist" & Income>7000 )%>%
select(Age,Marital)
dat1%>%group_by(Gender,Marital)
View(dat1)
dat1%>%group_by(Gender,Marital)%>%summarise(mean(Income))=dat5
dat1%>%group_by(Gender,Marital)%>%summarise(mean(Income))%>%=dat5
dat1%>%group_by(Gender,Marital)%>%summarise(mean(Income))%>%=%>%dat5
dat1%>%group_by(Gender,Marital)%>%summarise(mean(Income))->dat5
View(dat5)
dat1%>%group_by(Gender,Marital)->dat6
View(dat6)
dat1%>%group_by(Occupation,Marital)%>%summarise(mean(Income))->dat6
View(dat6)
dat1%>%group_by(Occupation,Gender)%>%summarise(mean(Income))->dat6
View(dat6)
dat1%>%group_by(Gender)%>%summarise(mean(Hours))->dat7
View(dat7)
dat1%>%group_by(Education,Employment)%>%summarise(n())->dat8
View(dat8)
dat1%>%group_by(Education,Employment)%>%summarise(n())%>%order()->dat8
dat1%>%group_by(Education,Employment)%>%summarise(Count=n())%>%order(Count)->dat8
dat1%>%group_by(Education,Employment)%>%summarise(Count=n())%>%arrange(Count)->dat8
View(dat8)
dat1%>%group_by(Education,Employment)%>%summarise(Count=n())%>%arrange(desc(Count))->dat8
View(dat8)
dat1%>%group_by(Education,Employment,Occupation)%>%summarise(Count=n())%>%arrange(desc(Count))->dat8
dat1%>%group_by(Education,Employment,Occupation)%>%summarise(Count=n())%>%
arrange(desc(Count))->dat8
View(dat8)
dat1%>%group_by(Education,Employment)%>%summarise(Count=n())%>%
arrange(desc(Count))->dat9
View(dat9)
dat1%>%group_by(Education,Employment,Income)%>%summarise(sum(Income))%>%
arrange(desc(Count))->dat10
dat1%>%group_by(Education,Employment,Income)%>%summarise(sum(Income),Count=n())%>%
arrange(desc(Count))->dat10
View(dat10)
dat1%>%group_by(Education,Employment)%>%summarise(sum(Income),Count=n())%>%
arrange(desc(Count))->dat10
View(dat10)
dat1%>%group_by(Education,Employment)%>%summarise(mean(Income),Count=n())%>%
arrange(desc(Count))->dat10
View(dat10)
dat1%>%group_by(Education,Employment)%>%summarise(mean(Income),mean(Hours),Count=n())%>%
arrange(desc(Count))->dat11
View(dat11)
# to get the least two incomes of Employment with males
dat1%>%group_by(Gender)%>%summarise(mean(Income))%>%filter(min_rank(desc(Income)))%>%arrange(desc(Income))
# to get the least two incomes of Employment with males
dat1%>%select(Gender,Income)%>%group_by(Gender)%>%filter(min_rank(desc(Income)))%>%arrange(desc(Income))
# to get the least two incomes of Employment with males
dat1%>%select(Gender,Income)%>%group_by(Gender)%>%
filter(min_rank(desc(Income))<=2)%>%arrange(desc(Income))
# to get the least two incomes of Employment with males
dat1%>%select(Gender,Income)%>%group_by(Gender)%>%
filter(min_rank(desc(Income))<=2)
# to get the least two incomes of Employment with males
dat1%>%select(Gender,Income)%>%filter(Gender=="Male")%>%
filter(min_rank(desc(Income))<=2)%>%arrange(desc(Income))
dat1%>%select(Gender,Income)%>%group_by(Gender)%>%
filter(cume_dist(desc(Income))<=0.01)%>%arrange(desc(Income))
dat1%>%mutate(Bin=ntile(Income,10))->dat12
View(dat12)
dat1%>%mutate(Bin2=ntile(desc(Income),10))->dat12
View(dat12)
dat1%>%mutate(Bin=ntile(Income,10))->dat12
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat13
View(dat13)
dat13%>%group_by(Bin2)%>%filter(Bin2=="1")
dat13%>%group_by(Bin2)
dat13%>%group_by(Bin2)%>%select(Bin2)
dat13%>%group_by(Bin2)%>%summarise(n())
cumsum(1:10)
cummax(1:10)
cummin(1:10)
cumany(1:10)
x=1:10
cumany(x=9)
cumall(x<=9)
cumany(x=9)
cumany(x,=9)
cumany(x<=9)
cumall(x<=9)
x
cumsum(1:10)
cumany(x<=9)
cumall(x<=9)
cummax(1:10)
cummax(1:10)
cumany(x<=9)
cumany(x>=9)
cumall(x>=9)
View(dat13)
dat13%>%group_by(Bin2)%>%summarise(n())
dat12
View(dat12)
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat12
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat12
View(dat12)
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat13
dat1%>%mutate(Bin=ntile(Income,10))->dat12
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat13
View(dat12)
dat13%>%group_by(Bin2)%>%summarise(n())
dat1%>%mutate(Bin=ntile(Income,10))->dat12
View(dat1)
dat1%>%mutate(Bin1=ntile(Income,10))->dat12
View(dat12)
dat1%>%mutate(Bin1=ntile(Hours,5))->dat12
View(dat12)
#returns a cumulative vector sum values in the cumulation
cumsum(1:10)
#returns a cumulative vector max values in the cumulation
cummax(1:10)
#returns a cumulative vector min values in the cumulation
cummin(1:10)
#returns a cumulative vectorcumulatively any values greater than 9
cumany(x>=9)
# cumulatively all the values greater than 9
cumall(x>=9)
# to get the cumulative distribution of sorted by income with 10% of the desc
dat1%>%select(Gender,Income)%>%group_by(Gender)%>%
filter(cume_dist(desc(Income))<=0.01)%>%arrange(desc(Income))
# decile min, max, mean, sum, count.
dat12%>%mutate(Bin2=ntile(desc(Income),10))->dat13
View(dat13)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))->dat13
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))->dat13%>%group_by(IncomeDecile)%<%summarise(min(Income),max(Income))
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))->dat13%>%group_by(IncomeDecile)%>%summarise(min(Income),max(Income))
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(min(Income),max(Income))
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(min(Income),max(Income),sum(Income),count(Income))
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(min(Income),max(Income),sum(Income),count())
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(min(Income),max(Income),sum(Income),n())
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),Mean=mean(Income),Count=n())
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),Mean=mean(Income),Count=n())->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),Mean=mean(Income),Count=n(),cumsum(Count))->dat14
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),Count=n(),cumsum(Count))->dat14
View(dat14)
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n(),cummcount=cumsum(Count))->dat14
View(dat14)
dat14
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n(),cum=cumsum(n()))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())->dat14
View(dat14)
str(dat14)
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%mutate(Cumsum=cumsum(Count))->dat14
View(dat14)
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%mutate(Cumsum=cumsum(Count),Cumsum800=cumany(Count))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%mutate(Cumsum=cumsum(Count),Cumsum800=cumany(Count>800))->dat14
View(dat14)
#returns a cumulative vectorcumulatively any values greater than 9
cumany(1:10>=9)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count),Cumsum800=cumany(Count>=800))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count),Cumsum800=cumall(Count>=800))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count),Cumsum800=cumall(Count<=800))->dat14
View(dat14)
x=1:10
x
#returns a cumulative vectorcumulatively any values greater than 9
cumany(x>=9)
# cumulatively all the values greater than 9
cumall(x>=9)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count),Cumsum800=cumall(Count>=600))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count))%>%mutate(Cumsum600=cumall(Cumsum>=600))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count))->dat14
View(dat14)
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count))%>%mutate(Cu=cumany(Cumsum))->dat14
# decile min, max, mean, sum, count.
dat1%>%mutate(IncomeDecile=ntile(desc(Income),10))%>%
group_by(IncomeDecile)%>%summarise(Min=min(Income),Max=max(Income),
Mean=mean(Income),
Count=n())%>%
mutate(Cumsum=cumsum(Count))%>%mutate(Cu=cumany(Cumsum>800))->dat14
View(dat14)
#install the sqldf
install.packages("sqldf")
library(sqldf)
sqldat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles\\oj.csv")
View(sqldat1)
sqldf("Select * from sqldat1 where brandname='tropicana")
sqldf("Select * from sqldat1 where brandname='tropicana'")
sqldf("Select * from sqldat1 where brand='tropicana'")
aggdata1=sqldf("select avg(income),min(income),max(income) from sqldf group by brand")
aggdata1=sqldf("select avg(income),min(income),max(income) from sqldat1 group by brand")
View(aggdata1)
aggdata1=sqldf("select brand,avg(income),min(income),max(income) from sqldat1 group by brand")
View(aggdata1)
sqldat1%<%mutate(Decile=ntile(income),3)%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
sqldat1%>%mutate(Decile=ntile(income),3)%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by brand")
sqldat1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles\\oj.csv")
sqldat1%>%mutate(Decile=ntile(income),3)%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
sqldat1%>%mutate(Decile=ntile(income,3))%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
sqldat1%>%mutate(Decile=ntile(INCOME,3))%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
sqldat1%>%mutate(Decile=ntile(INCOME,3))
sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
View(sqldat1)
sqldat1%>%mutate(Decile=ntile(INCOME,3))->sqldat1
View(sqldat1)
sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
sqldat1%>%mutate(Decile=ntile(INCOME,3))%>%sqldf("select brand,avg(income),min(income),max(income),count(income) from sqldat1 group by Decile")
id1=c(1,2,3,4,5)
names=c("a","b","c","d","e")
values=c(200,250,300,600,100)
table1=data.frame(id1,names,values)
table1=data.frame(id1,names,values)
id1=c(1,1,3,5)
packed=c("xyz","vnm","cdm","dma")
quant=c(200,250,300,600)
table2=data.frame(id1,packed,quant)
data1=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles\\left.csv")
data2=read.csv("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day4\\datafiles\\right.csv")
View(data1)
View(data2)
sqldf("select * from data1 innnerjoin data2")
sqldf("select * from data1 innerjoin data2")
sqldf("select * from data1 innerjoin data2 using(CustomerId)")
sqldf("select * from data1 data2 using(CustomerId)")
sqldf("select * from data1 join data2 using(CustomerId)")
innerJoin=sqldf("select * from data1 join data2 using(CustomerId)")
leftJoin= sqldf("select * from data1 left join data2 using(CustomerId)")
rightJoin= sqldf("select * from data1 left join data2 using(CustomerId)")
View(leftJoin)
rightJoin= sqldf("select * from data1 right join data2 using(CustomerId)")
# this to support left outer join
merge(data1,data2,all.x = TRUE)
#this to support right outer join
merge(data1,data2,all.y = TRUE)
leftJoin= sqldf("select * from data1 left join data2 using(CustomerId)")
View(leftJoin)
innerJoin=sqldf("select * from data1 join data2 using(CustomerId)")
View(innerJoin)
Result=data1[data2,nomatch=0]
leftJoin= sqldf("select * from data1 left join data2 using(CustomerId)")
View(leftJoin)
# this to support left outer join
merge(data1,data2,all.x = TRUE)
