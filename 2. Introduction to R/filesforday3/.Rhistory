pwd
getwd
?help
pwd()
getwd()
ls()
?image
/save.image()
?save.image()
search()
setwd("C:/Users/hemanth\Downloads/JigSaw/Day3 R lang")
setwd("C:/Users/hemanth/Downloads/JigSaw/Day3 R lang")
getwd()
c(1,29,-4,81,5)
c(1,29,-4,81,5)
c("Today", "is", "a", "sunny", "day.")
random=c("Today", "is", "a", "sunny", "day.")
random
library(MASS)
?MASS
?library(MASS)
vec <- 1:10
vec
mat <- matrix(1:10,5,5)
mat
mylist <- list(vec,mat,char)
char <- "jigsaw"
mylist <- list(vec,mat,char)
mylist
names(mylist) <- c("myvector","mymatrix","name")
names()
names(mylist)
?names
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
emp.data
emp.data$start_date
emp.data$order
emp.data[order(oj$start_date)]
emp.data[order(emp.data$start_date)]
emp.data[order(V)]
emp.data[order(emp.data$start_date)]
emp.data[order(emp.data$start_date),]
emp.data[order(-emp.data$start_date),]
emp.data[order-(emp.data$start_date),]
emp.data[order(-emp.data$start_date),]
clear
clearconsole
#arthematic operations
sqrt(25)
x=sqrt(25)
x
class(x)
y="hemanth"
y
class(y)
z='z'
class(z)
z='zebra'
class(z)
class(z)
ls()
# will load the objects in the current
ls()
# removing objects
rm(z)
ls
ls()
sample.dataframe = data.frame(x,y,mylist)
sample.dataframe
#data frame
x
y
mylist
class(mylist)
str(mylist)
str(sample.dataframe)
sample.dataframe
#data frame
prod(3,4,5)
3*4*5
5exp(3)
exp(3,5)
exp(3)
#vectors
num=c(1,2,3,4,5,6)
#vectors
sample.num=c(1,2,3,4,5,6)
sample.char=c("hemanth","virat","dhoni","DK","KW")
sample.bool=c(TRUE,FALSE,TRUE,FALSE,TRUE)
class(sample.bool)
for (variable in sample.char) {
if(sample.bool[1])
sample.char[1]
else
print("Out of squad")
}
for (variable in sample.char) {
if(sample.bool[1])
print(sample.char[1])
else
print("Out of squad")
}
for (variable in sample.char) {
print(variable)
if(sample.bool[1])
print(sample.char[1])
else
print("Out of squad")
}
for (variable in sample.char) {
print(variable)
if(sample.bool[1])
#print(sample.char[1])
else
print("Out of squad")
}
for (variable in sample.char) {
print(variable)
if(sample.bool[1])
#print(sample.char[1])
else
print("Out of squad")
}
for (variable in sample.char) {
print(variable)
if(sample.bool[1]){
#print(sample.char[1])
}
else
print("Out of squad")
}
seq=1:10
seq
seq1=seq(1:10)
seq1
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print("Out of squad")
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(variable +"Out of squad")
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(variable "Out of squad")
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(variable &"Out of squad")
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(c(variable, "Out of squad"))
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(cat(variable, "Out of squad"))
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
print(class(variable))
}
else
print(cat(variable, "Out of squad"))
}
mons=c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April");
class(mons)
mons=factor(mons)
class(mons)
table(mons)
mons
mons=c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April");
class(mons)
mons=factor(mons)
class(mons)
table(mons)
mons=c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April");
table(mons)
mons=c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April");
mons
mons=factor(mons)
mons
table(mons)
table(mons)
mons
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
print(class(variable))
}
else
print(cat(variable, "Out of squad"))
}
for (variable in sample.char) {
#print(variable)
if(sample.bool[match(variable,sample.char)]){
print(variable)
}
else
print(cat(variable, "Out of squad"))
}
sample.char=c("hemanth","virat","dhoni","DK","KW")
sample.bool=c(TRUE,FALSE,TRUE,FALSE,TRUE)
data.frame(sample.bool,sample.char)
sample.dataframe=data.frame(sample.bool,sample.char)
sample.dataframe$sample.bool=TRUE
sample.dataframe
sample2.num=c(1,2,3,4,5,6)
sample2.char=c("hemanth","virat","dhoni","DK","KW")
sample2.bool=c(TRUE,FALSE,TRUE,FALSE,TRUE)
sample2.dataframe=data.frame(sample.bool,sample.char)
class(sample2.dataframe)
sample2.dataframe
View(sample2.dataframe)
exampledata=data.frame(names=c("Amit","Anne","Jay",)
income=c(80000,75000,60000),
Gender=c("M","F","M"))
exampledata=data.frame(names=c("Amit","Anne","Jay"),
income=c(80000,75000,60000),
Gender=c("M","F","M"))
exampledata[names[2]]
exampledata$names[2]
exampledata$names[2]
exampledata ,2
exampledata
exampledata[2,2]
exampledata["income",2]
exampledata[,2]
exampledata$Gender=="M"
dt=example.data[exampledata$Gender=="M",]
dt=exampledata[exampledata$Gender=="M",]
dt
dt=exampledata[exampledata$Gender=="M" & exampledata$income>70000 ,]
dt
View(exampledata[exampledata$Gender=="M" & exampledata$income>70000 ,])
sample3.md.vector =c("anni","ar","mani","dsp")
sample3.rating.vector =c(4,6,7,5,6)
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector)
exampledata[1,1]
c("Amit","Anne","Jay","Amit")
datat=c("Amit","Anne","Jay","Amit")
datat
mons=c("March","April","January","November","January",
"September","October","September","November","August",
"January","November","November","February","May","August",
"July","December","August","August","September","November",
"February","April");
mons=factor(mons)
table(mons)
mons
sample3.rating.vector =c(4,6,7,5)
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector)
sample3.dataframe$avg(sample3.rating.vector)
ave(sample3.dataframe[2])
sample3.md.vector =c("anni","ar","mani","dsp")
sample3.rating.vector =c(4,6,7,5)
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector)
ave(sample3.dataframe[2])
class(sample3.rating.vector)
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector,row.names = FALSE)
mean(sample3.dataframe[2])
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector,col.names = FALSE)
ave(sample3.dataframe[2])
sample3.rating.vector =c(4,6,7,5)
sample3.dataframe= data.frame(sample3.md.vector,sample3.rating.vector,col.names = FALSE)
sample3.dataframe
getwd()
setwd("C:\\Users\\hemanth\\Downloads\\JigSaw\\Day3 R lang\\filesforday3")
getwd()
good1=read.table("customers.csv",header=TRUEue,sep=",",stringsAsFactors = TRUE)
good1=read.table("customers.csv",header=TRUE,sep=",",stringsAsFactors = TRUE)
good1
View(good1)
str(good1)
good2=read.table("customers.csv",header=TRUE,sep=",",stringsAsFactors = FALSE)
View(good2)
str(good2)
mean(good2$zip)
ZIP=c(good2$zip)
zip=c(good2$zip)
zip
LAPeople=good1[good1$state==LA,]
LAPeople=good1[good1$state=="LA",]
LAPeople
read.delim("customers.csv",header = TRUE,sep=",")
class(good2)
#using as.is to convert the with factors of the required column
good3=read.table("customers.csv",header=TRUE,sep=",",stringsAsFactors = TRUE,as.is = "first_name")
str(good3)
#using na.strings to blank feilds
good4=read.table("customers.csv",header=TRUE,sep=",",stringsAsFactors = TRUE)
View(good4)
#using na.strings to blank feilds
good4=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE)
View(good4)
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE,fill = "NA")
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE,na.strings ="county")
View(good5)
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE, colClasses = "county")
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE, colClasses = "character")
View(good5)
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE, na.strings = "NA")
View(good5)
type.convert(good5,na.strings = "NA")
View(type.convert(good5,na.strings = "NA"))
good5=read.table("customers3.csv",header=TRUE,sep=",",stringsAsFactors = TRUE,na.strings = c("","NA"))
View(good5)
save(good1,good2,good5,"good1-5.rda")
save(good1,good2,good5,file="good1-5.rda")
getwd()
# installing the packages and sample data sets
install.packages("datasets")
install.packages("datasets")
install.packages("datasets.load")
library(datasets)
data()
data("iris")
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
install.packages("XLConnectJars")
dataurl=url("http://www.gutenberg.org/cache/epub/2701/pg2701.txt")
webtextutl=readLines(dataurl)
webtextutl
webtextutl=readLines(dataurl,n=50)
View(webtextutl)
View(dataurl)
class(dataurl)
dataurl=url("http://www.stats.ox.ac.uk/pub/datasets/csb/ch11b.dat")
dataframeurl=read.table(dataurl)
View(dataframeurl)
dataurl=url("http://www.gutenberg.org/cache/epub/2701/pg2701.txt")
webtextutl=readLines(dataurl,n=50)
View(dataurl)
View(webtextutl)
#downloading file from url links
download.file("http://www.gutenberg.org/files/2701/2701-0.txt","sampleurl.txt")
#JSON file
library(rjson)
#JSON file
library(jsonlite)
install.packages("jsonlite")
#JSON file
library(jsonlite)
data.customersjson=fromJSON("customersJSON.txt")
data.customersjson
class(data.customersjson)
view(data.customersjson)
View(data.customersjson)
str(data.customersjson)
data.convertToFactor=as.data.frame(data.customersjson)
data.convertToFactor
str(data.convertToFactor)
data.convertToFactor=as.data.frame(data.customersjson,stringsAsFactors)
data.convertToFactor=data.frame(data.customersjson,stringsAsFactors)
data.convertToFactor=type.convert(data.customersjson)
str(data.convertToFactor)
